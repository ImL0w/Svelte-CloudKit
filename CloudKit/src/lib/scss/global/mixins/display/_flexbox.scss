@use '../../utility/responsive.scss' as *;

@mixin flex($direction: row, $important: false, $plain: null) {
	@if $plain != 'direction' {
		@if $important == true {
			display: flex !important;
		} @else {
			display: flex;
		}
	}

	@if $plain != 'display' {
		@if $important == true {
			flex-direction: $direction !important;
		} @else {
			flex-direction: $direction;
		}
	}
}

@mixin flexbox {
	@include __flexResponsive;

	.flex-vr {
		@include __flexAlignments(align-items);
	}

	.flex-hr {
		@include __flexAlignments();
	}

	.flex-left {
		@include __flexAlignments(justify-content, right);
	}

	.flex-end {
		@include __flexAlignments(justify-content, flex-end);
	}

	.flex-all {
		justify-content: center;
		align-items: center;
	}

	.flex-1 {
		flex: 1;
	}

	.flex-wrap {
		flex-wrap: wrap;
	}
}

@mixin __flexAlignments($property: justify-content, $value: center) {
	#{$property}: $value;
}

@mixin __important {
	&\! {
		@content;
	}
}

@mixin __flexResponsive(
	$sizes: (
		sm: $mobile,
		md: $tablet,
		xl: $pc
	)
) {
	$directions: row, column;

	.flex {
		@each $direction in $directions {
			$prefix: '';
			$opposite: column;
			@if $direction == column {
				$prefix: '-col';
				$opposite: row;
			}

			//1 ex. flex || flex-col
			&#{$prefix} {
				@include flex($direction);
				@include __important() {
					@include flex($direction, true);
				}

				@each $key, $size in $sizes {
					//2 ex. flex-col-md
					&-#{$key} {
						@extend .flex#{$prefix};
						//3.1 ex. flex-col-md || flex-col-md!
						@include mediaMin($size) {
							@include flex($opposite, false, direction);

							@include __important() {
								@include flex($opposite, true, direction);
							}
						}
					}
				}
			}
		}

		&-d {
			@each $key, $size in $sizes {
				// ex 1 flex-d-sm || flex-d-sm!
				&-#{$key} {
					@include mediaMin($size) {
						@include flex(null, false, display);
						@include __important() {
							@include flex(null, true, display);
						}
					}
				}
			}
		}
	}
}