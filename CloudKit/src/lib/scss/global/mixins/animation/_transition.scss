/// This mixin creates reusable classes for the `transition` property. TODO
/// @group Animation
/// @param {list(propertyName | map(prop: propertyName, class: className))}  $targets - List of properties on which the transition effect should be applied. If the property name shouldn't be used for the class name, then specify this trough a map. Example: (prop: color, class: myColor)
/// @param {list(number)} $speeds - List of animation speeds in milliseconds (without unit, plain numbers!)
/// @example scss
///  @include transitions((all, ('prop': background-color, 'class': background)), 150, 250);
@use 'sass:list';
@mixin transitions($targets: (), $speeds: ()) {
	@if length($targets) > 0 and length($speeds) > 0 {
		.transition {
			@each $target in $targets {
				$targetSpeeds: $speeds;
				$targetProp: $target;
				$targetClass: $target;

				@if type-of($target) == map {
					@if (map-get($target, 'class')) {
						$targetProp: map-get($target, 'prop');
						$targetClass: map-get($target, 'class');
					} @else if(map-get($target, 'prop')) {
						$targetProp: map-get($target, 'prop');
						$targetClass: $targetProp;
					} @else {
						@error "target of type map but 'class' or 'prop' is missing";
					}
					@if (map-get($target, 'speed')) {
						$targetSpeeds: list.append($targetSpeeds, map-get($target, 'speed'));
					}
				}

				&-#{$targetClass} {
					@each $speed in $targetSpeeds {
						@if type-of($speed) == number {
							&-#{$speed} {
								transition: $targetProp #{$speed}ms ease-in-out;
							}
						} @else {
							@error "Invalid animation speed value! The value must type of number. Broken value: #{$speed}.";
						}
					}
				}
			}
		}
	} @else {
		@error "$targets/$speed is undefined";
	}
}